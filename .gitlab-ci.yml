# This file is a template, and might need editing before it works on your project.
# To contribute improvements to CI/CD templates, please follow the Development guide at:
# https://docs.gitlab.com/ee/development/cicd/templates.html
# This specific template is located at:
# https://gitlab.com/gitlab-org/gitlab/-/blob/master/lib/gitlab/ci/templates/Getting-Started.gitlab-ci.yml

# This is a sample GitLab CI/CD configuration file that should run without any modifications.
# It demonstrates a basic 3 stage CI/CD pipeline. Instead of real tests or scripts,
# it uses echo commands to simulate the pipeline execution.
#
# A pipeline is composed of independent jobs that run scripts, grouped into stages.
# Stages run in sequential order, but jobs within stages run in parallel.
#
# For more information, see: https://docs.gitlab.com/ee/ci/yaml/index.html#stages

stages:          # List of stages for jobs, and their order of execution
  - build
  - test
  - lint
  - deploy

build-eslint:
  image: node:14
  stage: build
  script:
    - echo "runnping NPM install hopefully"
    - cd ./scheduler-app
    - npm install
    - npm i eslint
    - npx eslint ./src/App.js

isort:   # This job also runs in the test stage.
  stage: lint    # It can run at the same time as unit-test-job (in parallel).
  image: python:3.9-slim-buster
  before_script:
    - pip install isort
  script:
    - echo "Running ISORT"
    - isort scheduler-app/flask/app.py -c

pylint:   # This job also runs in the test stage.
  stage: lint    # It can run at the same time as unit-test-job (in parallel).
  image: python:3.9-slim-buster
  before_script:
    - pip install pylint
  script:
    - echo "Running pylint"
    - pylint scheduler-app/flask/app.py --disable=E0401 # ignore import errors because gitlab runner doesn't need flask

flake8:   # This job also runs in the test stage.
  stage: lint    # It can run at the same time as unit-test-job (in parallel).
  image: python:3.9-slim-buster
  before_script:
    - pip install flake8
  script:
    - echo "Running Flake8"
    - flake8  scheduler-app/flask/app.py

jest:
  image: node:14
  stage: test
  script:
    - cd ./scheduler-app
    - npm install
    - npm run test


auto-deploy:
  image: alpine:latest
  stage: deploy
  # From tutorial: https://filip5114.github.io/GitLab-CI-Pipeline-SSH/
  before_script:
  - 'command -v ssh-agent >/dev/null || ( apk add --update openssh )' 
  - eval $(ssh-agent -s)
  - echo "$SSH_PRIVATE_KEY" | tr -d '\r' | ssh-add -
  - mkdir -p ~/.ssh
  - chmod 700 ~/.ssh
  - ssh-keyscan $VM_IPADDRESS >> ~/.ssh/known_hosts
  - chmod 644 ~/.ssh/known_hosts
  script: # IF we actually want to deploy, put what is needed here
  - ssh $SSH_USER@$VM_IPADDRESS
  - pwd
  - echo "Hello from gitlab runner"
  - exit

